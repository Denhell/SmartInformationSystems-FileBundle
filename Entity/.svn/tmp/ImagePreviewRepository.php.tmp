<?php

namespace SmartSystems\FileBundle\Entity;

use Symfony\Component\HttpFoundation\File\File as SymfonyFile;
use Doctrine\ORM\EntityManager;
use Imagine\Gd\Imagine;
use Imagine\Image\Box;
use Imagine\Image\ImageInterface;

use SmartSystems\FileBundle\Common\AbstractRepository;
use SmartSystems\FileBundle\Storage\AbstractStorage;

/**
 * Репозиторий изображений.
 *
 */
class ImagePreviewRepository extends AbstractRepository
{
    /**
     * Создание экземпляра объекта.
     *
     * @param SymfonyFile $originalFile Оригиналный файл
     *
     * @return Image
     */
    public function createEntity(SymfonyFile $originalFile)
    {
        return new ImagePreview($originalFile);
    }

    /**
     * Создание превью.
     *
     * @param Image $image Изображение
     * @param string $name Имя
     * @param integer $width Ширина
     * @param integer $height Высота
     * @param boolean $crop Обрезать или нет
     * @param EntityManager $em Подключение к БД
     * @param AbstractStorage $storage Хранилище
     *
     * @return ImagePreview
     *
     * @throws \Exception
     */
    public static function createPreview(Image $image, $name, $width, $height, $crop, EntityManager $em, AbstractStorage $storage)
    {
        /** @var ImagePreviewRepository $repository */
        $repository = $em->getRepository('SmartSystemsFileBundle:ImagePreview');
        if ($preview = $repository->getByName($image, $name)) {
            return $preview;
        }

        // Создадим превью
        $tmpFilename = '/tmp/preview_' . $name . '_' . md5(microtime() . $image->getId()) . '.' . pathinfo($image->getFile()->getName(), PATHINFO_EXTENSION);
        $imagine = new Imagine();
        $imagine
            ->open($storage->getUrl($image))
            ->thumbnail(
                new Box($width, $height),
                $crop ? ImageInterface::THUMBNAIL_OUTBOUND : ImageInterface::THUMBNAIL_INSET
            )
            ->save($tmpFilename)
        ;

        $preview = new ImagePreview(new SymfonyFile($tmpFilename));
        $preview->setImage($image);
        $preview->setName($name);

        return $preview;
    }

    /**
     * Возвращает превью изображения по имени.
     *
     * @param Image $image Изображение
     * @param string $name Имя
     *
     * @return ImagePreview
     */
    public function getByName(Image $image, $name)
    {
        return $this->findOneBy(array(
            'image' => $image,
            'name' => $name,
        ));
    }
}
