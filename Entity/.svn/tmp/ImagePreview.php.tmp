<?php

namespace SmartSystems\FileBundle\Entity;

use Doctrine\ORM\Mapping as ORM;

/**
 * Превью изображения.
 *
 * @ORM\Entity
 * @ORM\Table(name="sis_image_preview", uniqueConstraints={@ORM\UniqueConstraint(name="ui_name", columns={"image_id", "name"})})
 * @ORM\HasLifecycleCallbacks()
 */
class ImagePreview
{
    /**
     * Идентификатор.
     *
     * @var int
     *
     * @ORM\Id
     * @ORM\Column(type="integer", options={"unsigned"=true})
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * Имя превью.
     *
     * @var string
     *
     * @ORM\Column(nullable=false)
     */
    protected $name;

    /**
     * Изображение.
     *
     * @var Image
     *
     * @ORM\ManyToOne(targetEntity="Image", inversedBy="previews")
     * @ORM\JoinColumn(name="image_id", referencedColumnName="id", nullable=false)
     */
    protected $image;

    /**
     * Файл.
     *
     * @var File
     *
     * @ORM\OneToOne(targetEntity="File", cascade={"persist"})
     * @ORM\JoinColumn(name="file_id", referencedColumnName="id", nullable=false)
     */
    protected $file;

    /**
     * Ширина картинки.
     *
     * @var integer
     *
     * @ORM\Column(type="integer", nullable=false)
     */
    protected $width;

    /**
     * Высота картинки.
     *
     * @var integer
     *
     * @ORM\Column(type="integer", nullable=false)
     */
    protected $height;

    /**
     * Дата создания.
     *
     * @var \DateTime
     *
     * @ORM\Column(name="created_at", type="datetime", nullable=true)
     */
    protected $createdAt;

    /**
     * Возвращает идентификатор.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Устанавливает имя.
     *
     * @param string $name Имя
     *
     * @return ImagePreview
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Возвращает имя.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Устанавливает ширину.
     *
     * @param integer $width Ширина
     *
     * @return ImagePreview
     */
    public function setWidth($width)
    {
        $this->width = $width;

        return $this;
    }

    /**
     * Возвращает ширину
     *
     * @return integer
     */
    public function getWidth()
    {
        return $this->width;
    }

    /**
     * Устанавливает высоту.
     *
     * @param integer $height Высота
     *
     * @return ImagePreview
     */
    public function setHeight($height)
    {
        $this->height = $height;

        return $this;
    }

    /**
     * Возвращает высоту.
     *
     * @return integer
     */
    public function getHeight()
    {
        return $this->height;
    }

    /**
     * Устанавливает дату создания.
     *
     * @param \DateTime $createdAt Дата создания
     *
     * @return ImagePreview
     */
    private function setCreatedAt($createdAt)
    {
        $this->createdAt = $createdAt;

        return $this;
    }

    /**
     * Возвращает дату создания.
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->createdAt;
    }

    /**
     * Устанавливает изображение.
     *
     * @param Image $image Изображение
     *
     * @return ImagePreview
     */
    public function setImage(Image $image)
    {
        $this->image = $image;

        return $this;
    }

    /**
     * Возвращает изображение.
     *
     * @return Image
     */
    public function getImage()
    {
        return $this->image;
    }

    /**
     * Устанавливает файл.
     *
     * @param File $file Файл
     *
     * @return ImagePreview
     */
    public function setFile(File $file)
    {
        $this->file = $file;

        return $this;
    }

    /**
     * Возвращает файл.
     *
     * @return File
     */
    public function getFile()
    {
        return $this->file;
    }

    /**
     * Автоматическая установка даты создания.
     *
     * @ORM\PrePersist
     */
    public function prePersistHandler()
    {
        $this->setCreatedAt(new \DateTime());
    }

    /**
     * Устанавливает токен.
     *
     * @param string $token Токен
     *
     * @return Image
     */
    public function setToken($token)
    {
        $this->getFile()->setToken($token);

        return $this;
    }

    /**
     * Возвращает токен.
     *
     * @return string
     */
    public function getToken()
    {
        return $this->getFile()->getToken();
    }

    /**
     * Устанавливает токен во внешней системе.
     *
     * @param string $externalToken Токен во внешней системе
     *
     * @return Image
     */
    public function setExternalToken($externalToken)
    {
        $this->getFile()->setExternalToken($externalToken);

        return $this;
    }

    /**
     * Возвращает токен во внешней системе.
     *
     * @return string
     */
    public function getExternalToken()
    {
        return $this->getFile()->getExternalToken();
    }

    /**
     * Является ли файл картинкой.
     *
     * @return bool
     */
    public function isImage()
    {
        return TRUE;
    }
}