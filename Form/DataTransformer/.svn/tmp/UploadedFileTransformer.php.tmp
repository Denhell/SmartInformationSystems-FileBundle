<?php

namespace SmartSystems\FileBundle\Form\DataTransformer;

use Symfony\Component\Form\DataTransformerInterface;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\Form\Exception\TransformationFailedException;
use Doctrine\Common\Persistence\ObjectManager;

use SmartSystems\FileBundle\Storage\AbstractStorage;

/**
 * Обработка загруженных файлов.
 *
 */
class UploadedFileTransformer implements DataTransformerInterface
{
    /**
     * Подключение к БД.
     *
     * @var ObjectManager
     */
    private $om;

    /**
     * Хранилище.
     *
     * @var AbstractStorage
     */
    private $storage;

    /**
     * Конструктор.
     *
     * @param ObjectManager $om Подключение к БД
     * @param AbstractStorage $storage Хранилище
     */
    public function __construct(ObjectManager $om, AbstractStorage $storage)
    {
        $this->om = $om;
        $this->storage = $storage;
    }

    /**
     * {@inheritdoc}
     */
    public function transform($value)
    {
        return $value;
    }

    /**
     * {@inheritdoc}
     */
    public function reverseTransform($value)
    {
        error_log('test: 1');
        if ($value === NULL) {
            return NULL;
        }
        error_log('test: 2');
        if (is_string($value)) {
            error_log('test: 3');
            $file = $this->om
                ->getRepository('SmartSystemsFileBundle:File')
                ->find($value);

<<<<<<< .mine
        if (is_string($value)) {
            $file = $this->om
                ->getRepository('SmartSystemsFileBundle:File')
                ->find($value);

            if ($file) {
                return $file;
            }
        }

=======
            if ($file) {
                error_log('test: 4');
                return $file;
            }
        }
        error_log('test: 5');
>>>>>>> .r348
        if (!($value instanceof UploadedFile)) {
<<<<<<< .mine

            throw new TransformationFailedException('Возможно обратное преобразование только UploadedFile.');
=======
            error_log('test: 6');
            throw new TransformationFailedException('Возможно обратное преобразование только UploadedFile.');
>>>>>>> .r348
        }
<<<<<<< .mine

        return $this->storage->store($value);
=======
        error_log('test: 7');
        return $this->storage->store($value);
>>>>>>> .r348
    }
}
